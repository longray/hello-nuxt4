{
  "用户": {
    "姓名": "向阳",
    "生日": "1976-12-24",
    "学习偏好": [
      "结构化输出",
      "任务驱动",
      "中文偏好，如有需要可中英双语讲解"
    ],
    "开发流程偏好": [
      "编码前先出 TODO List，并保存到 .ai_memory/task.md 文件中，变更被审批通过后更新 TODO List；如被拒绝，不更新",
      "编码前先查看 .ai_memory/task.md 文件中的 TODO List，确保任务未被其他助手修改",
      "编码前进行自我审查"
    ],
    "称呼协议": {
      "总指挥": "规划项目时",
      "大师兄": "传授知识时",
      "领航员": "探索新技术时",
      "拆弹专家": "调试 Bug 时",
      "代码艺术家": "代码重构或优化时",
      "老司机": "日常指导时"
    },
    "目标": {
      "短期": "通过重写 Nuxt4 示例深化理解与实战能力",
      "长期": "打造 AI + 人类协作的技术学习生态系统"
    },
    "挑战": [
      "确保 AI 严格执行 TODO List",
      "在自动化与可读性之间取得平衡"
    ]
  },
  "项目": {
    "名称": "Nuxt4 官方示例学习",
    "目标": {
      "短期": "通过逐步模仿并实现官方示例，掌握 Nuxt4 核心功能",
      "长期": "构建完整的 Nuxt4 应用开发知识体系"
    },
    "学习方式": "按官方示例文档中每个示例逐一实现与探索",
    "重点功能": [
      "页面渲染 (SSR/CSR/ISR)",
      "数据获取 (asyncData, fetch)",
      "状态管理 (Pinia)",
      "布局与路由",
      "插件与中间件",
      "性能优化"
    ],
    "示例进度": {
      "已实现": [],
      "进行中": [],
      "待开始": []
    }
  },
  "issues": [
    {
      "id": "ts-bug-001",
      "example": "typescript-implicit-any",
      "context": "编写 TypeScript 函数时",
      "problem": "函数参数未声明类型导致 “implicitly has an 'any' type” 错误",
      "solution": "为所有函数参数显式声明类型，如 `(name: string)`",
      "verified": true,
      "tags": [
        "TypeScript",
        "类型声明"
      ],
      "lastUpdated": "2025-08-31"
    },
    {
      "id": "nuxt-gotcha-001",
      "example": "server-directory-location",
      "context": "Nuxt4 项目结构中 server 目录位置",
      "problem": "将 server 目录放在 srcDir 下导致 API 路由加载失败",
      "solution": "必须将 `server/` 目录放置在项目根目录",
      "verified": true,
      "tags": [
        "Nuxt4",
        "server",
        "API 路由"
      ],
      "lastUpdated": "2025-09-01"
    },
    {
      "id": "dev-workflow-001",
      "example": "general-dev-process",
      "context": "在 Nuxt 开发服务器运行时修改前端代码",
      "problem": "修改前端代码后不必要地重启服务器，导致开发效率降低且应用状态丢失。",
      "solution": "利用 Nuxt 内置的热模块替换（HMR）功能。在编辑前端文件（如 .vue, .css）后，无需重启服务器，变更会自动在浏览器中生效。",
      "verified": true,
      "tags": ["HMR", "dev-workflow", "Nuxt4"],
      "sources": ["用户口述经验"],
      "lastUpdated": "2024-07-29"
    },
    {
      "id": "ui-theme-001",
      "example": "hello-world",
      "context": "在 `pages/index.vue` 中为 `<pre>` 标签设置背景色",
      "problem": "使用固定的背景色（如 `bg-gray-100`）在暗色主题下会导致文本（白色）和背景（浅灰色）对比度不足，内容难以辨认。",
      "cause": "硬编码的颜色无法根据系统的 `color-scheme` 或用户的主题偏好自动调整。",
      "solution": "使用 `@nuxtjs/color-mode` 模块和 Tailwind CSS 的 `dark:` 变体来定义主题感知的颜色。例如，可以设置为 `bg-gray-100 dark:bg-gray-800`，这样在亮色模式下背景为浅灰，在暗色模式下背景为深灰，确保任何主题下都有良好的可读性。",
      "verified": true,
      "tags": ["Nuxt4", "TailwindCSS", "dark-mode", "theming"],
      "sources": [
        "https://tailwindcss.com/docs/dark-mode",
        "https://color-mode.nuxtjs.org/"
      ],
      "lastUpdated": "2024-07-30"
    }
  ]
}